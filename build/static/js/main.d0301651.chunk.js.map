{"version":3,"sources":["LoginOrRegister.js","SavedCities.js","Weather.js","App.js","index.js"],"names":["initialState","login","username","password","LoginOrRegister","register","useState","state","setState","handleInputChange","e","prevState","target","name","value","Container","className","Row","Col","md","xl","Form","Group","Label","Control","isInvalid","undefined","errMessage","onChange","type","Feedback","success","Button","onClick","operation","variant","SavedCities","savedCities","Card","Header","Body","length","Accordion","map","val","i","Item","eventKey","city","weatherData","weather","main","description","Math","floor","temp","temp_min","temp_max","Weather","props","cities","open","maxResults","placeholder","id","options","saveCity","App","usersRegistered","setUsersRegistered","isAuthenticated","setAuthentication","setSavedCities","miniCities","stateID","state_id","stateName","state_name","lat","lng","fetch","then","res","json","data","catch","err","user","find","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.d0301651.chunk.js","sourcesContent":["import { useState } from \"react\"\nimport { Col, Container, Button, Form, Row } from \"react-bootstrap\"\n\nconst initialState = {\n  login: true,\n  username: \"\",\n  password: \"\",\n} \n\nconst LoginOrRegister = ({ login, register }) => {\n  const [state, setState] = useState(initialState)\n  const changeLoginOrRegister = () => setState(prevState => ({ ...initialState, login: !prevState.login }))\n  const handleInputChange = e => setState(prevState => ({ ...prevState, [e.target.name]: e.target.value }))\n  const doLoginOrRegister = () => {\n    if(!state.username || !state.password) return setState({ ...state, errMessage: \"Username or Password cannot be empty!\" })\n\n    const operation = state.login ?\n        login({\n          username: state.username,\n          password: state.password\n        })\n      :\n        register({\n          username: state.username,\n          password: state.password\n        })\n\n    if(operation === false) setState({ ...initialState, login: state.login, errMessage : state.login ? \"No user found with given credentials!\" : \"You already have an account...\" })\n    else setState({ ...initialState, success: true })\n  }\n\n  return (\n    <Container className=\"mt-4\">\n      <Row  className=\"justify-content-center\">\n        <Col md={6} xl={4}>\n          <Form>\n            <Form.Group className=\"my-2\">\n              <Form.Label>{state.login ? null : \"Create\"} Username</Form.Label>\n              <Form.Control isInvalid={state.errMessage !== undefined} onChange={handleInputChange} name=\"username\" type=\"text\" value={state.username} />\n            </Form.Group>\n            <Form.Group className=\"my-2\">\n              <Form.Label>{state.login ? null : \"Create\"} Password</Form.Label>\n              <Form.Control isInvalid={state.errMessage !== undefined} onChange={handleInputChange} name=\"password\" type=\"password\" value={state.password}/>\n              <Form.Control.Feedback className=\"text-center\" type=\"invalid\">{state.errMessage}</Form.Control.Feedback>\n              {state.success ? <p className=\"text-success text-center m-2\">Registration Succesful</p> : null }\n            </Form.Group>\n            <Form.Group className=\"text-center m-3\">\n              <Button onClick={doLoginOrRegister}>{state.login ? \"Login\" : \"Register\"}</Button>\n              <Button onClick={changeLoginOrRegister} variant=\"link\">{state.login ? \"Don't have an account\" : \"Already have an account\"}</Button>\n            </Form.Group>\n          </Form>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default LoginOrRegister","import { Card, ListGroup, Accordion, Container, Row, Col } from \"react-bootstrap\";\n\nexport default function SavedCities({ savedCities }) {\n  return (\n    <Card>\n      <Card.Header>\n        <p>Filters</p>\n      </Card.Header>\n      <Card.Body>\n        {!savedCities.length ? (\n          <p className=\"text-center\">You haven't saved any cities yet!</p>\n        ) : (\n          <Accordion>\n            {savedCities.map((val, i) => (\n              <Accordion.Item key={`city${i}`} eventKey={i}>\n                <Accordion.Header>{val.city}</Accordion.Header>\n                <Accordion.Body>\n                  {!val.weatherData ? (\n                    <p className=\"text-danger text-center\">Weather data on this city could not be fetched!</p>\n                  ) : (\n                    <Container>\n                      <Row>\n                        <Col>\n                          <p>Main: {val.weatherData.weather[0].main}</p>\n                          <p>Description: {val.weatherData.weather[0].description}</p>\n                        </Col>\n                        <Col>\n                          <p>Main Temperature: {Math.floor(val.weatherData.main.temp)}</p>\n                          <p>Min: {Math.floor(val.weatherData.main.temp_min)}</p>\n                          <p>Max: {Math.floor(val.weatherData.main.temp_max)}</p>\n                        </Col>\n                      </Row>\n                    </Container>\n                  )}\n                </Accordion.Body>\n              </Accordion.Item>\n            ))}\n          </Accordion>\n        )}\n      </Card.Body>\n    </Card>\n  );\n}\n","import { Container, Row, Col, Form } from \"react-bootstrap\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\nimport SavedCities from \"./SavedCities\";\n\nexport default function Weather(props) {\n  \n  const cities = props.cities.map(val => val.city)\n\n  return (\n    <Container className=\"mt-3\">\n      <Row>\n        <Col className=\"text-center\">\n          <p>City Weather Service</p>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Typeahead\n            open={true}\n            maxResults={20}\n            placeholder=\"Type a city...\"\n            id=\"typeahead\"\n            options={cities} \n            onChange={props.saveCity} \n          />\n        </Col>\n        <Col>\n          <SavedCities savedCities={props.savedCities} />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport \"./styles.css\";\nimport cities from \"./us_cities.json\"\nimport { useState } from \"react\";\nimport Login from \"./LoginOrRegister\";\nimport Weather from \"./Weather\";\n\nexport default function App() {\n  const [usersRegistered, setUsersRegistered] = useState([])\n  const [isAuthenticated, setAuthentication] = useState(false)\n  const [savedCities, setSavedCities] = useState([]);\n  const miniCities = cities.map(val => ({\n    city: val.city,\n    stateID: val.state_id,\n    stateName: val.state_name,\n    lat: val.lat,\n    lng: val.lng,\n  }))\n  const saveCity = ([ city ]) => {\n    if(!city) return\n    // fetch weather data for city\n    // save city to the saveCities state with is weather data\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=3abd9c2df6a249e8abcf4f812de0a627&units=imperial`)\n    .then((res) => res.json())\n    .then(data => setSavedCities([...savedCities, { city, weatherData : data }]))\n    .catch(setSavedCities([...savedCities, { city, err : true }]))\n  }\n\n  const login = user => {\n    const found = usersRegistered.find(val => val.username === user.username && val.password === user.password)\n    if(!found) return false\n    setAuthentication(!isAuthenticated)\n  }\n  const register = user => {\n    const found = usersRegistered.find(val => val.username === user.username && val.password === user.password)\n    if(found) return false\n    setUsersRegistered([ ...usersRegistered, user ])\n  }\n\n  return isAuthenticated ? (\n    <Weather cities={miniCities} savedCities={savedCities} saveCity={saveCity} />\n    ) : (\n    <Login login={login} register={register}  />\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}